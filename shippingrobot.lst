CCS PCM C Compiler, Version 5.015, 5967               27-May-19 11:28

               Filename:   C:\Users\quang\OneDrive\Desktop\CSS PIC C\shippingrobot_v0.2\shippingrobot\shippingrobot.lst

               ROM used:   671 words (8%)
                           Largest free fragment is 2048
               RAM used:   21 (6%) at main() level
                           36 (10%) worst case
               Stack used: 3 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   233
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  RETLW  31
0005:  RETLW  31
0006:  RETLW  3A
0007:  RETLW  32
0008:  RETLW  38
0009:  RETLW  3A
000A:  RETLW  35
000B:  RETLW  34
000C:  RETLW  00
*
00D2:  CLRF   77
00D3:  CLRF   78
00D4:  MOVF   3A,W
00D5:  BCF    03.0
00D6:  BTFSC  3B.0
00D7:  ADDWF  77,F
00D8:  RRF    77,F
00D9:  RRF    78,F
00DA:  BTFSC  3B.1
00DB:  ADDWF  77,F
00DC:  RRF    77,F
00DD:  RRF    78,F
00DE:  BTFSC  3B.2
00DF:  ADDWF  77,F
00E0:  RRF    77,F
00E1:  RRF    78,F
00E2:  BTFSC  3B.3
00E3:  ADDWF  77,F
00E4:  RRF    77,F
00E5:  RRF    78,F
00E6:  BTFSC  3B.4
00E7:  ADDWF  77,F
00E8:  RRF    77,F
00E9:  RRF    78,F
00EA:  BTFSC  3B.5
00EB:  ADDWF  77,F
00EC:  RRF    77,F
00ED:  RRF    78,F
00EE:  BTFSC  3B.6
00EF:  ADDWF  77,F
00F0:  RRF    77,F
00F1:  RRF    78,F
00F2:  BTFSC  3B.7
00F3:  ADDWF  77,F
00F4:  RRF    77,F
00F5:  RRF    78,F
00F6:  RETURN
*
014B:  MOVF   3A,W
014C:  XORWF  3C,W
014D:  ANDLW  80
014E:  MOVWF  3E
014F:  BTFSS  3A.7
0150:  GOTO   156
0151:  COMF   39,F
0152:  COMF   3A,F
0153:  INCF   39,F
0154:  BTFSC  03.2
0155:  INCF   3A,F
0156:  BTFSS  3C.7
0157:  GOTO   15D
0158:  COMF   3B,F
0159:  COMF   3C,F
015A:  INCF   3B,F
015B:  BTFSC  03.2
015C:  INCF   3C,F
015D:  MOVLW  10
015E:  MOVWF  3D
015F:  CLRF   77
0160:  CLRF   7A
0161:  RRF    3A,F
0162:  RRF    39,F
0163:  BTFSS  03.0
0164:  GOTO   16B
0165:  MOVF   3B,W
0166:  ADDWF  77,F
0167:  BTFSC  03.0
0168:  INCF   7A,F
0169:  MOVF   3C,W
016A:  ADDWF  7A,F
016B:  RRF    7A,F
016C:  RRF    77,F
016D:  RRF    79,F
016E:  RRF    78,F
016F:  DECFSZ 3D,F
0170:  GOTO   161
0171:  BTFSS  3E.7
0172:  GOTO   178
0173:  COMF   78,F
0174:  COMF   79,F
0175:  INCF   78,F
0176:  BTFSC  03.2
0177:  INCF   79,F
*
01B1:  MOVF   3A,W
01B2:  XORWF  3B,W
01B3:  ANDLW  80
01B4:  MOVWF  3D
01B5:  BTFSS  3A.7
01B6:  GOTO   1B9
01B7:  COMF   3A,F
01B8:  INCF   3A,F
01B9:  BTFSS  3B.7
01BA:  GOTO   1BD
01BB:  COMF   3B,F
01BC:  INCF   3B,F
01BD:  MOVF   3B,W
01BE:  CLRF   78
01BF:  SUBWF  3A,W
01C0:  BTFSC  03.0
01C1:  GOTO   1C5
01C2:  MOVF   3A,W
01C3:  MOVWF  77
01C4:  GOTO   1D1
01C5:  CLRF   77
01C6:  MOVLW  08
01C7:  MOVWF  3C
01C8:  RLF    3A,F
01C9:  RLF    77,F
01CA:  MOVF   3B,W
01CB:  SUBWF  77,W
01CC:  BTFSC  03.0
01CD:  MOVWF  77
01CE:  RLF    78,F
01CF:  DECFSZ 3C,F
01D0:  GOTO   1C8
01D1:  BTFSS  3D.7
01D2:  GOTO   1D5
01D3:  COMF   78,F
01D4:  INCF   78,F
....................  
.................... #list 
....................  
.................... #fuses NOWDT, PUT, HS, NOPROTECT, NOLVP 
.................... #use delay(clock=20M) 
.................... #use rs232(baud=9600,xmit=pin_c6,rcv=pin_c7) 
....................  
.................... //#define LOW_SPEED 
.................... #define HIGH_SPEED 
.................... #include "lib/global.h" 
.................... extern int line_sensor; 
.................... extern int destination; 
.................... extern int station; 
.................... extern int current_position; 
.................... extern int delivered_flag; 
....................  
.................... #include "lib/sensor.h" 
.................... #ifndef __SENSOR__ 
.................... #define __SENSOR__ 
.................... #include "global.h" 
.................... extern int line_sensor; 
.................... extern int destination; 
.................... extern int station; 
.................... extern int current_position; 
.................... extern int delivered_flag; 
....................  
.................... /*#include "driver.h" 
.................... // d5 d6 d7 lll s1 s2 s3 
.................... void dk_line() 
.................... { 
....................    if(input(pin_d5)==0 && input(pin_d6)==0 && input(pin_d7)==0){ 
....................          dk_dc(0); 
....................       } 
....................    if(input(pin_d5)==1 && input(pin_d6)==0 && input(pin_d7)==1){ 
....................          dk_dc(0); 
....................       } 
....................    if(input(pin_d5)==0 && input(pin_d6)==0 && input(pin_d7)==1){ 
....................         dk_dc(-2); 
....................    } 
....................    if(input(pin_d5)==1 && input(pin_d6)==0 && input(pin_d7)==0){ 
....................          dk_dc(2); 
....................    } 
....................    if(input(pin_d5)==0 && input(pin_d6)==1 && input(pin_d7)==1){ 
....................         dk_dc(-2); 
....................    } 
....................    if(input(pin_d5)==1 && input(pin_d6)==1 && input(pin_d7)==0){ 
....................          dk_dc(2); 
....................    } 
.................... }*/ 
.................... int read_line_sensor() { 
....................    return (~input_a())&0x1f; 
*
0093:  MOVLW  FF
0094:  BSF    03.5
0095:  MOVWF  05
0096:  BCF    03.5
0097:  MOVF   05,W
0098:  XORLW  FF
0099:  ANDLW  1F
009A:  MOVWF  78
009B:  RETURN
.................... } 
.................... signed int distance() { 
....................    static signed int last_value = 0; 
....................    if (line_sensor == 0b00000100) { 
*
00F7:  MOVF   20,W
00F8:  SUBLW  04
00F9:  BTFSS  03.2
00FA:  GOTO   0FE
....................       return 0; 
00FB:  MOVLW  00
00FC:  MOVWF  78
00FD:  GOTO   12C
....................    } 
....................    if (line_sensor == 0b00010000) { 
00FE:  MOVF   20,W
00FF:  SUBLW  10
0100:  BTFSS  03.2
0101:  GOTO   105
....................       return -3; 
0102:  MOVLW  FD
0103:  MOVWF  78
0104:  GOTO   12C
....................    } 
....................    if (line_sensor == 0b00001100) { 
0105:  MOVF   20,W
0106:  SUBLW  0C
0107:  BTFSS  03.2
0108:  GOTO   10C
....................       return -2; 
0109:  MOVLW  FE
010A:  MOVWF  78
010B:  GOTO   12C
....................    } 
....................    if (line_sensor == 0b00001000) { 
010C:  MOVF   20,W
010D:  SUBLW  08
010E:  BTFSS  03.2
010F:  GOTO   113
....................       return -1; 
0110:  MOVLW  FF
0111:  MOVWF  78
0112:  GOTO   12C
....................    } 
....................    if (line_sensor == 0b00000010) { 
0113:  MOVF   20,W
0114:  SUBLW  02
0115:  BTFSS  03.2
0116:  GOTO   11A
....................       return 1; 
0117:  MOVLW  01
0118:  MOVWF  78
0119:  GOTO   12C
....................    } 
....................    if (line_sensor == 0b00000110) { 
011A:  MOVF   20,W
011B:  SUBLW  06
011C:  BTFSS  03.2
011D:  GOTO   121
....................       return 2; 
011E:  MOVLW  02
011F:  MOVWF  78
0120:  GOTO   12C
....................    } 
....................    if (line_sensor == 0b00000001) { 
0121:  DECFSZ 20,W
0122:  GOTO   127
....................       return 3; 
0123:  MOVLW  03
0124:  MOVWF  78
0125:  GOTO   12C
....................    } 
0126:  GOTO   12A
....................    else { 
....................       return last_value; 
0127:  MOVF   25,W
0128:  MOVWF  78
0129:  GOTO   12C
....................    } 
....................    last_value = line_sensor; 
012A:  MOVF   20,W
012B:  MOVWF  25
.................... } 
....................  
.................... int detect_obstacle() { 
....................    return 0; 
*
01F2:  MOVLW  00
01F3:  MOVWF  78
01F4:  BCF    0A.3
01F5:  BCF    0A.4
01F6:  GOTO   28F (RETURN)
.................... } 
....................  
.................... #endif 
....................  
.................... #include "lib/driver.h" 
.................... #ifndef __DRIVER__ 
.................... #define __DRIVER__ 
.................... static int overall_speed = 128; 
.................... // min 128, max 255; 
....................  
.................... const int kp = 50; 
.................... const int ki = 10; 
.................... const int kd = 20; 
....................  
.................... void set_speed(int speed) { 
....................    set_pwm1_duty(speed); 
*
002F:  MOVF   34,W
0030:  MOVWF  15
....................    set_pwm2_duty(speed); 
0031:  MOVF   34,W
0032:  MOVWF  1B
....................    overall_speed = speed; 
0033:  MOVF   34,W
0034:  MOVWF  26
0035:  RETURN
.................... } 
.................... /*void dk_dc(signed int8 x) 
.................... { 
....................    if (x == 1) { 
....................       set_pwm1_duty(90); 
....................       set_pwm2_duty(90); 
....................    } 
....................    if(x==0){ 
....................    set_pwm1_duty(80); 
....................     set_pwm2_duty(80);} 
....................    if(x==-1){  
....................    set_pwm1_duty(15); 
....................    set_pwm2_duty(40);} 
....................    if(x==2){ 
....................    set_pwm1_duty(155); 
....................    set_pwm2_duty(0);} 
....................    if(x==-2){ 
....................    set_pwm1_duty(0); 
....................    set_pwm2_duty(120);} 
.................... }*/ 
....................  
.................... void forward() { 
....................    output_high(PIN_B1); 
0036:  BSF    03.5
0037:  BCF    06.1
0038:  BCF    03.5
0039:  BSF    06.1
....................    output_low(PIN_B2); 
003A:  BSF    03.5
003B:  BCF    06.2
003C:  BCF    03.5
003D:  BCF    06.2
....................    output_high(PIN_B3); 
003E:  BSF    03.5
003F:  BCF    06.3
0040:  BCF    03.5
0041:  BSF    06.3
....................    output_low(PIN_B4); 
0042:  BSF    03.5
0043:  BCF    06.4
0044:  BCF    03.5
0045:  BCF    06.4
0046:  BCF    0A.3
0047:  BCF    0A.4
0048:  GOTO   263 (RETURN)
.................... } 
....................  
.................... void back() { 
....................    output_low(PIN_B1); 
....................    output_high(PIN_B2); 
....................    output_low(PIN_B3); 
....................    output_high(PIN_B4); 
.................... } 
.................... void stop(){ 
....................    output_low(PIN_B1); 
*
01F7:  BSF    03.5
01F8:  BCF    06.1
01F9:  BCF    03.5
01FA:  BCF    06.1
....................    output_low(PIN_B2); 
01FB:  BSF    03.5
01FC:  BCF    06.2
01FD:  BCF    03.5
01FE:  BCF    06.2
....................    output_low(PIN_B3); 
01FF:  BSF    03.5
0200:  BCF    06.3
0201:  BCF    03.5
0202:  BCF    06.3
....................    output_low(PIN_B4); 
0203:  BSF    03.5
0204:  BCF    06.4
0205:  BCF    03.5
0206:  BCF    06.4
0207:  BCF    0A.3
0208:  BCF    0A.4
0209:  GOTO   293 (RETURN)
.................... } 
.................... void turn (signed int vec) { 
....................    if (vec == 0) { 
*
0194:  MOVF   38,F
0195:  BTFSS  03.2
0196:  GOTO   19B
....................       set_pwm1_duty(overall_speed); 
0197:  MOVF   26,W
0198:  MOVWF  15
....................       set_pwm2_duty(overall_speed); 
0199:  MOVF   26,W
019A:  MOVWF  1B
....................    } 
....................    #ifdef HIGH_SPEED 
....................    if (abs(vec) > overall_speed) { 
019B:  MOVF   38,W
019C:  BTFSS  38.7
019D:  GOTO   1A0
019E:  MOVF   38,W
019F:  SUBLW  00
01A0:  MOVWF  77
01A1:  BTFSC  77.7
01A2:  GOTO   1DC
01A3:  MOVF   77,W
01A4:  SUBWF  26,W
01A5:  BTFSC  03.0
01A6:  GOTO   1DC
....................       vec = vec/abs(vec) * overall_speed; 
01A7:  MOVF   38,W
01A8:  BTFSS  38.7
01A9:  GOTO   1AC
01AA:  MOVF   38,W
01AB:  SUBLW  00
01AC:  MOVWF  39
01AD:  MOVF   38,W
01AE:  MOVWF  3A
01AF:  MOVF   39,W
01B0:  MOVWF  3B
*
01D5:  MOVF   78,W
01D6:  MOVWF  3A
01D7:  MOVF   26,W
01D8:  MOVWF  3B
01D9:  CALL   0D2
01DA:  MOVF   78,W
01DB:  MOVWF  38
....................    } 
....................    if (vec > 0) { 
01DC:  BTFSC  38.7
01DD:  GOTO   1E9
01DE:  MOVF   38,W
01DF:  SUBLW  00
01E0:  BTFSC  03.0
01E1:  GOTO   1E9
....................       set_pwm1_duty(overall_speed); 
01E2:  MOVF   26,W
01E3:  MOVWF  15
....................       set_pwm2_duty(overall_speed - vec); 
01E4:  MOVF   38,W
01E5:  SUBWF  26,W
01E6:  MOVWF  39
01E7:  MOVWF  1B
....................    } 
01E8:  GOTO   1EF
....................    else { 
....................       set_pwm1_duty(overall_speed + vec); 
01E9:  MOVF   38,W
01EA:  ADDWF  26,W
01EB:  MOVWF  39
01EC:  MOVWF  15
....................       set_pwm2_duty(overall_speed); 
01ED:  MOVF   26,W
01EE:  MOVWF  1B
....................    } 
....................    #endif 
....................     
....................    #ifdef LOW_SPEED 
....................    if (vec > 0) { 
....................       long pwm1 = overall_speed + vec; 
....................       int pwm2 = overall_speed; 
....................       if (pwm1 > 255) { 
....................          pwm2 -= pwm1 % 255; 
....................          pwm1 = 255; 
....................       } 
....................       set_pwm1_duty(pwm1); 
....................       set_pwm2_duty(pwm2); 
....................    } 
....................    if (vec < 0) { 
....................       int pwm1 = overall_speed; 
....................       long pwm2 = overall_speed - vec; 
....................       if (pwm2 > 255) { 
....................          pwm1 -= pwm2 % 255; 
....................          pwm2 = 255; 
....................       } 
....................       set_pwm1_duty(pwm1); 
....................       set_pwm2_duty(pwm2); 
....................    } 
....................    #endif 
....................     
.................... } 
.................... void pid_control() { 
*
012C:  MOVF   78,W
012D:  MOVWF  35
012E:  MOVF   29,W
012F:  SUBWF  35,W
0130:  MOVWF  36
....................    static signed long sum; 
*
0253:  BCF    03.5
0254:  CLRF   27
0255:  CLRF   28
....................    static signed int old_x; 
0256:  CLRF   29
....................    signed int x = distance(); 
....................    signed int error = x - old_x; 
....................    sum += error; 
*
0131:  CLRF   7A
0132:  MOVF   36,W
0133:  BTFSC  36.7
0134:  DECF   7A,F
0135:  ADDWF  27,F
0136:  MOVF   7A,W
0137:  BTFSC  03.0
0138:  INCFSZ 7A,W
0139:  ADDWF  28,F
....................    signed int turn_angle = kp*x + ki*sum + kd*error; 
013A:  MOVLW  32
013B:  MOVWF  3A
013C:  MOVF   35,W
013D:  MOVWF  3B
013E:  CALL   0D2
013F:  CLRF   39
0140:  MOVF   78,W
0141:  MOVWF  38
0142:  BTFSC  38.7
0143:  DECF   39,F
0144:  CLRF   3A
0145:  MOVLW  0A
0146:  MOVWF  39
0147:  MOVF   28,W
0148:  MOVWF  3C
0149:  MOVF   27,W
014A:  MOVWF  3B
*
0178:  MOVF   79,W
0179:  MOVWF  7A
017A:  MOVF   78,W
017B:  ADDWF  38,F
017C:  MOVF   79,W
017D:  BTFSC  03.0
017E:  INCFSZ 79,W
017F:  ADDWF  39,F
0180:  MOVLW  14
0181:  MOVWF  3A
0182:  MOVF   36,W
0183:  MOVWF  3B
0184:  CALL   0D2
0185:  MOVF   78,W
0186:  CLRF   7A
0187:  MOVWF  77
0188:  BTFSC  77.7
0189:  DECF   7A,F
018A:  ADDWF  38,W
018B:  MOVWF  78
018C:  MOVF   39,W
018D:  BTFSC  03.0
018E:  INCFSZ 39,W
018F:  ADDWF  7A,F
0190:  MOVF   78,W
0191:  MOVWF  37
....................    turn(turn_angle); 
0192:  MOVF   37,W
0193:  MOVWF  38
....................    old_x = x; 
*
01EF:  MOVF   35,W
01F0:  MOVWF  29
01F1:  RETURN
.................... } 
....................  
.................... void turn180() { 
*
021B:  RETURN
.................... } 
.................... #endif 
....................  
.................... #include "lib/obstacle.h" 
.................... // header define function to avoid obstacle on the line 
.................... #ifndef __OBSTACLE__ 
.................... #define __OBSTACLE__ 
.................... void avoid_obstacle() { 
.................... } 
.................... #endif 
....................  
....................  
.................... #include "lib/robot_state.h" 
.................... // check robot position and status 
.................... #include "global.h" 
.................... extern int line_sensor; 
.................... extern int destination; 
.................... extern int station; 
.................... extern int current_position; 
.................... extern int delivered_flag; 
....................  
.................... #ifndef __ROBOT_STATE__ 
.................... #define __ROBOT_STATE__ 
....................  
.................... int is_at_cross() { 
....................    if (line_sensor == 0b00011011) { 
*
009C:  MOVF   20,W
009D:  SUBLW  1B
009E:  BTFSS  03.2
009F:  GOTO   0A4
....................       return 1; 
00A0:  MOVLW  01
00A1:  MOVWF  78
00A2:  GOTO   0A6
....................    } 
00A3:  GOTO   0A6
....................    else { 
....................       return 0; 
00A4:  MOVLW  00
00A5:  MOVWF  78
....................    } 
.................... } 
.................... int update_current_position() { 
....................    static long last_time = 0, period; 
*
0257:  CLRF   2C
0258:  CLRF   2D
....................    if (is_at_cross()) { 
*
00A6:  MOVF   78,F
00A7:  BTFSC  03.2
00A8:  GOTO   0B7
....................       period = __TIME__ - last_time; 
00A9:  MOVLW  00
00AA:  MOVWF  7A
00AB:  MOVLW  04
00AC:  MOVWF  34
00AD:  MOVF   2A,W
00AE:  SUBWF  34,W
00AF:  MOVWF  2C
00B0:  MOVF   7A,W
00B1:  MOVWF  2D
00B2:  MOVF   2B,W
00B3:  BTFSS  03.0
00B4:  INCFSZ 2B,W
00B5:  SUBWF  2D,F
....................    } 
00B6:  GOTO   0BA
....................    else { 
....................       last_time = __TIME__; 
00B7:  MOVLW  31
00B8:  MOVWF  2A
00B9:  MOVWF  2B
....................    } 
....................    if (period > 50) { 
00BA:  MOVF   2D,F
00BB:  BTFSS  03.2
00BC:  GOTO   0C0
00BD:  MOVF   2C,W
00BE:  SUBLW  32
00BF:  BTFSS  03.0
....................       current_position++; 
00C0:  INCF   23,F
....................    } 
....................    return current_position; 
00C1:  MOVF   23,W
00C2:  MOVWF  78
00C3:  BCF    0A.3
00C4:  BCF    0A.4
00C5:  GOTO   289 (RETURN)
.................... } 
....................  
.................... int is_at_destination() { 
....................    if (current_position > 5) { 
*
020A:  MOVF   23,W
020B:  SUBLW  05
020C:  BTFSC  03.0
020D:  GOTO   216
....................       if (current_position - 5 == destination) { 
020E:  MOVLW  05
020F:  SUBWF  23,W
0210:  SUBWF  21,W
0211:  BTFSS  03.2
0212:  GOTO   216
....................          return 1; 
0213:  MOVLW  01
0214:  MOVWF  78
0215:  GOTO   218
....................       } 
....................    } 
....................    return 0; 
0216:  MOVLW  00
0217:  MOVWF  78
0218:  BCF    0A.3
0219:  BCF    0A.4
021A:  GOTO   295 (RETURN)
.................... } 
.................... int is_at_station() { 
....................    if (current_position == station) { 
*
00C6:  MOVF   22,W
00C7:  SUBWF  23,W
00C8:  BTFSS  03.2
00C9:  GOTO   0CD
....................       return 1; 
00CA:  MOVLW  01
00CB:  MOVWF  78
00CC:  GOTO   0CF
....................    } 
....................    return 0; 
00CD:  MOVLW  00
00CE:  MOVWF  78
00CF:  BCF    0A.3
00D0:  BCF    0A.4
00D1:  GOTO   28A (RETURN)
.................... } 
....................  
.................... #endif 
....................  
.................... #include "lib/esp_comm.h" 
.................... #ifndef __ESP_COMM__ 
.................... #define __ESP_COMM__ 
....................  
.................... int get_esp_data_loop(char *str) { 
....................    if (kbhit()) { 
*
0049:  BTFSS  0C.5
004A:  GOTO   060
....................       char c; 
....................       int i = 0; 
004B:  CLRF   37
....................       while ((c = getc()) != '\n') { 
004C:  BTFSS  0C.5
004D:  GOTO   04C
004E:  MOVF   1A,W
004F:  MOVWF  36
0050:  SUBLW  0A
0051:  BTFSC  03.2
0052:  GOTO   05D
....................          str[i] = c; 
0053:  MOVF   37,W
0054:  ADDWF  34,W
0055:  MOVWF  04
0056:  BCF    03.7
0057:  BTFSC  35.0
0058:  BSF    03.7
0059:  MOVF   36,W
005A:  MOVWF  00
....................          i++; 
005B:  INCF   37,F
005C:  GOTO   04C
....................       } 
....................       return 1; 
005D:  MOVLW  01
005E:  MOVWF  78
005F:  GOTO   062
....................    } 
....................    return 0; 
0060:  MOVLW  00
0061:  MOVWF  78
0062:  BCF    0A.3
0063:  BCF    0A.4
0064:  GOTO   267 (RETURN)
.................... } 
.................... signed int get_speed(char *str) { 
....................    if (str[0] != '1') { 
0065:  MOVF   34,W
0066:  MOVWF  04
0067:  BCF    03.7
0068:  BTFSC  35.0
0069:  BSF    03.7
006A:  MOVF   00,W
006B:  SUBLW  31
006C:  BTFSC  03.2
006D:  GOTO   071
....................       return -1; 
006E:  MOVLW  FF
006F:  MOVWF  78
0070:  GOTO   079
....................    } 
....................    return str[1]; 
0071:  MOVLW  01
0072:  ADDWF  34,W
0073:  MOVWF  04
0074:  BCF    03.7
0075:  BTFSC  35.0
0076:  BSF    03.7
0077:  MOVF   00,W
0078:  MOVWF  78
0079:  BCF    0A.3
007A:  BCF    0A.4
007B:  GOTO   274 (RETURN)
.................... } 
.................... signed int get_destination(char *str) { 
....................    if (str[0] != '0') { 
....................       return -1; 
....................    } 
....................    return str[1]; 
.................... } 
.................... signed int get_station(char *str) { 
....................    if (str[0] != '2') { 
007C:  MOVF   34,W
007D:  MOVWF  04
007E:  BCF    03.7
007F:  BTFSC  35.0
0080:  BSF    03.7
0081:  MOVF   00,W
0082:  SUBLW  32
0083:  BTFSC  03.2
0084:  GOTO   088
....................       return -1; 
0085:  MOVLW  FF
0086:  MOVWF  78
0087:  GOTO   090
....................    } 
....................    return str[1]; 
0088:  MOVLW  01
0089:  ADDWF  34,W
008A:  MOVWF  04
008B:  BCF    03.7
008C:  BTFSC  35.0
008D:  BSF    03.7
008E:  MOVF   00,W
008F:  MOVWF  78
0090:  BCF    0A.3
0091:  BCF    0A.4
0092:  GOTO   280 (RETURN)
.................... } 
.................... #endif 
....................  
....................  
.................... int line_sensor = 0; 
.................... int current_position = 0; 
.................... int destination = 0; 
.................... int station = 0; 
.................... int delivered_flag = 0; 
....................  
.................... void init() { 
....................    set_tris_b(0x01); 
*
000D:  MOVLW  01
000E:  BSF    03.5
000F:  MOVWF  06
....................    port_b_pullups(1); 
0010:  BCF    01.7
....................    set_tris_a(0xff); 
0011:  MOVLW  FF
0012:  MOVWF  05
....................    setup_ccp1(CCP_PWM); 
0013:  BCF    03.5
0014:  BCF    2E.2
0015:  MOVF   2E,W
0016:  BSF    03.5
0017:  MOVWF  07
0018:  BCF    03.5
0019:  BCF    07.2
001A:  MOVLW  0C
001B:  MOVWF  17
....................    setup_ccp2(CCP_PWM); 
001C:  BCF    2E.1
001D:  MOVF   2E,W
001E:  BSF    03.5
001F:  MOVWF  07
0020:  BCF    03.5
0021:  BCF    07.1
0022:  MOVLW  0C
0023:  MOVWF  1D
....................    setup_timer_2(T2_DIV_BY_16, 255, 1); 
0024:  MOVLW  00
0025:  MOVWF  78
0026:  IORLW  06
0027:  MOVWF  12
0028:  MOVLW  FF
0029:  BSF    03.5
002A:  MOVWF  12
002B:  BCF    03.5
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   25A (RETURN)
.................... } 
....................  
.................... void back_to_the_future() { 
....................    turn180(); 
*
021C:  CALL   21B
....................    int cross_count_to_the_start = 5 + destination - 1; 
021D:  MOVLW  05
021E:  ADDWF  21,W
021F:  ADDLW  FF
0220:  MOVWF  34
....................    current_position = 0; 
0221:  CLRF   23
....................    while (current_position != cross_count_to_the_start) { 
0222:  MOVF   34,W
0223:  SUBWF  23,W
0224:  BTFSC  03.2
0225:  GOTO   22B
....................       line_sensor = read_line_sensor(); 
0226:  CALL   093
0227:  MOVF   78,W
0228:  MOVWF  20
....................       pid_control(); 
0229:  CALL   0F7
022A:  GOTO   222
....................    } 
....................    turn180(); 
022B:  CALL   21B
....................    // reset everythings from the last run 
....................    station = 0; 
022C:  CLRF   22
....................    destination = 0; 
022D:  CLRF   21
....................    current_position = 0; 
022E:  CLRF   23
....................    delivered_flag = 0; 
022F:  CLRF   24
0230:  BCF    0A.3
0231:  BCF    0A.4
0232:  GOTO   29B (RETURN)
.................... } 
....................  
.................... int main() { 
0233:  MOVF   03,W
0234:  ANDLW  1F
0235:  MOVWF  03
0236:  MOVLW  81
0237:  BSF    03.5
0238:  MOVWF  19
0239:  MOVLW  A6
023A:  MOVWF  18
023B:  MOVLW  90
023C:  BCF    03.5
023D:  MOVWF  18
023E:  CLRF   25
023F:  MOVLW  80
0240:  MOVWF  26
0241:  CLRF   2B
0242:  CLRF   2A
0243:  CLRF   20
0244:  CLRF   23
0245:  CLRF   21
0246:  CLRF   22
0247:  CLRF   24
0248:  MOVLW  FF
0249:  MOVWF  2E
024A:  CLRF   2F
024B:  BSF    03.5
024C:  BSF    1F.0
024D:  BSF    1F.1
024E:  BSF    1F.2
024F:  BCF    1F.3
0250:  MOVLW  07
0251:  MOVWF  1C
0252:  BCF    03.7
....................    init(); 
*
0259:  GOTO   00D
....................     
....................    while (input(PIN_B0)) { 
025A:  BSF    03.5
025B:  BSF    06.0
025C:  BCF    03.5
025D:  BTFSC  06.0
025E:  GOTO   25A
....................    } 
....................     
....................    set_speed(255); 
025F:  MOVLW  FF
0260:  MOVWF  34
0261:  CALL   02F
....................    forward(); 
0262:  GOTO   036
....................     
....................    while (True) { 
....................       // wait for signal 
....................       static int start_flag = 0; 
....................       char str[3]; 
....................       int speed; 
....................       while (get_esp_data_loop(str) && !start_flag) { 
0263:  CLRF   35
0264:  MOVLW  30
0265:  MOVWF  34
0266:  GOTO   049
0267:  MOVF   78,F
0268:  BTFSC  03.2
0269:  GOTO   270
026A:  MOVF   2F,F
026B:  BTFSS  03.2
026C:  GOTO   270
....................          start_flag = 1; 
026D:  MOVLW  01
026E:  MOVWF  2F
026F:  GOTO   263
....................       } 
....................       if ((speed = get_speed(str)) > 0) { 
0270:  CLRF   35
0271:  MOVLW  30
0272:  MOVWF  34
0273:  GOTO   065
0274:  MOVF   78,W
0275:  MOVWF  33
0276:  MOVF   33,F
0277:  BTFSC  03.2
0278:  GOTO   27C
....................          set_speed(speed); 
0279:  MOVF   33,W
027A:  MOVWF  34
027B:  CALL   02F
....................       } 
....................       if ((station = get_station(str)) > 0) { 
027C:  CLRF   35
027D:  MOVLW  30
027E:  MOVWF  34
027F:  GOTO   07C
0280:  MOVF   78,W
0281:  MOVWF  22
0282:  MOVF   22,F
0283:  BTFSC  03.2
0284:  GOTO   285
....................       } 
....................       line_sensor = read_line_sensor(); 
0285:  CALL   093
0286:  MOVF   78,W
0287:  MOVWF  20
....................        
....................       update_current_position(); 
0288:  GOTO   09C
....................        
....................       if (is_at_station()) { 
0289:  GOTO   0C6
028A:  MOVF   78,F
028B:  BTFSC  03.2
028C:  GOTO   28D
....................          while ((destination = get_destination(str)) < 0) { 
....................             get_esp_data_loop(str); 
....................             stop(); 
....................          } 
....................       } 
....................       // control the robot follow the line 
....................       pid_control(); 
028D:  CALL   0F7
....................        
....................       while (detect_obstacle()) { 
028E:  GOTO   1F2
028F:  MOVF   78,F
0290:  BTFSC  03.2
0291:  GOTO   294
....................          stop(); 
0292:  GOTO   1F7
0293:  GOTO   28E
....................       } 
....................        
....................       if (is_at_destination()) { 
0294:  GOTO   20A
0295:  MOVF   78,F
0296:  BTFSC  03.2
0297:  GOTO   29B
....................          delivered_flag = 1; 
0298:  MOVLW  01
0299:  MOVWF  24
....................          back_to_the_future(); 
029A:  GOTO   21C
....................       } 
029B:  GOTO   263
....................    } 
....................    return 0; 
029C:  MOVLW  00
029D:  MOVWF  78
.................... } 
....................  
029E:  SLEEP
....................  
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
